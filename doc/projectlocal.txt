INTRODUCTION                                 *projectlocal-vim* *projectlocal*

Load your vim project configurations safely, for vim and neovim. Written in
typescript as a |denops.vim| plugin.

CONFIGURATION                                            *projectlocal-config*

Below are the default configurations, which must be defined before the plugin
is loaded by your plugin manager:

Vimscript
>
    let g:projectlocal = {
        \ 'showMessage': v:true,
        \ 'projectConfig': '.vim/init.vim',
        \ 'debug': v:false,
        \ }
<

Lua
>
    vim.g.projectlocal = {
        showMessage = true,
        projectConfig = '.vim/init.lua',
        debug = false,
    }
<

To get started, create the local config in your project root. The simplest
way is to call `:PLConfig` which will create the file as defined in
|g:projectlocal.projectConfig| filepath. You can also manually create the
file.

Start making changes into the file that is project specific and on the next
reload of vim/nvim, it will prompt you to accept the file to be sourced.

Note: Whenever you change your local config file, projectlocal will prompt you
to accept the changes before it will be sourced. Refer to the README.md
on the repo https://github.com/creativenull/projectlocal-vim

JSON CONFIGURATION                                  *projectlocal-json-config*

If you want a more simplified way of setting up local configuration for your
project, you can in turn use a .json file instead. But there is limited
support on what you can do with it, since it's aim is to simplify setup when
needed especially when configuring lsp clients (like the builtin nvim-lsp).

First, change the projectlocal config to a .json file:

>
    let g:projectlocal = { 'projectConfig': '.nvimrc.json' }
<

Then create a `init.json` file in your project folder with |:PLConfig|. There
is only support for two keys within the "projectlocal" key in the json file:

>
    {
        "projectlocal": {
            "nvim-lsp": {},
            "globalVars": {}
        }
    }
<

"lsp" is for setting up builtin nvim-lsp. Note, this will only work for nvim
0.5 and up and not for vim8. It takes an array of lsp servers that are
supported with nvim-lspconfig. Here is an example to setup `tsserver` with a
root_dir set to the tsconfig.json file:

>
    {
        "projectlocal": {
            "nvim-lsp": {
                "tsserver": {
                    "root_dir": ["jsconfig.json"]
                },
                "pyright": true
            }
        }
    }
<

If you want to include an `on_attach` function to register your keymaps and
other functionality to when any LSP server starts, you can use the provided
lua code to add to your init.lua/init.vim to globally attach your custom
`on_attach` and your `capabilities` (for init.vim files you can wrap this in
|:lua-heredoc|):

>
    local function on_attach()
        print('attached')
    end

    require('projectlocal.lsp').setup({
        -- your custom on_attach
        on_attach = on_attach 
    })
<

"globalVars" is for setting up `g:` variables, where the first level of the
structure is converted to a `g:` variable, this is useful for setting up
plugins that need a global variable config, like ALE. Here is an
example setting up ALE linters and fixers for a javascript project:

>
    {
        "projectlocal": {
            "globalVars": {
                "ale_linters": {
                    "javascript": ["eslint"]
                },
                "ale_fixers": {
                    "javascript": ["prettier"]
                }
            }
        }
    }
<

This will convert to the vimscript equivalent:

>
    let g:ale_linters = { 'javascript': ['eslint'] }
    let g:ale_fixers = { 'javascript': ['prettier'] }
<

COMMANDS	                                       *projectlocal-commands*

                                *:PLConfig*
PLConfig                        Open the project local config file, if it
                                exists.

                                *:PLAutoloadEnable*
PLAutoloadEnable                Enable auto sourcing, if it was disabled.
                                This means on the next time you open vim
                                and the local project config has changed
                                then it will ask the user to allow sourcing
                                the file. If there were no changes on the
                                local project config file then source it
                                automatically.

                                *:PLAutoloadDisable*
PLAutoloadDisable               Disable auto sourcing, if it was enabled.
                                This means the next time you open vim then
                                it will not automatically source the local
                                project config file, but can manually load
                                the file via |:PLLoad|.

                                *:PLLoad*
PLLoad                          Manually source the local project config
                                file if autoload is disabled.


 vim:tw=78:ts=8:noet:ft=help:norl:
